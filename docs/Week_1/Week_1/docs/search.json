[
  {
    "objectID": "DA_Week1_25.html",
    "href": "DA_Week1_25.html",
    "title": "Week 1: Visualising and data tidying using R",
    "section": "",
    "text": "1 Getting started 1\nThis week we will review various techniques for data tidying, wrangling and visualization in R. This will also include the correct interpretation and understanding of the different plotting techniques.\n\n\n\n\n\n\nNote\n\n\n\nA lot of the content within this course is based on the open-source book Statistical Inference via Data Science and thus is a useful source for additional examples and questions.\n\n\nFirst, start by opening RStudio by going to Desktop -&gt; Maths-Stats -&gt; RStudio. Once RStudio has opened create a new R script by going to File -&gt; New File -&gt; R Script. Next go to File -&gt; Save As... and save the script into your personal drive, either M: or K: (do not save it to the H: drive). We shall now load into R all of the libraries we will need for this session. This can be done by typing the following into your R script:\n\nCodelibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(nycflights13)\nlibrary(fivethirtyeight)\n\n\nThe libraries can be loaded into R by highlighting them in your script and then clicking on the Run button located in the top right of the script window. The first library ggplot2 allows us to use functions within that package in order to create nice data visualisations. The tidyverse library is actually a collection of different R packages for manipulating data. The final two libraries (nycflights13 and fivethirtyeight) contain interesting data sets that we shall examine in this session.\nNotice that when loading the tidyverse package you get a message that tells you about conflicting functions of certain packages. This means that there is at least one or more functions with the same name loaded from different packages (and thus one the function will mask the other). You can use the function tidyverse_conflicts() for getting a list of the conflicted packages:\n\nCodetidyverse_conflicts()\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nIn here, we can see for example that the filter function from the dplyr package has a conflict with the filter function in base R stats library. A way of sorting that out is to load the dplyr library after base R so that R will only consider the version of the function that was last loaded. We can be more rigorous about this and load the conflicted library. This will prohibit us to us any functions that have some conflict with previously defined functions.\n\nCodelibrary(conflicted)\n\n\nBy doing this, we would need to be more specific about the source package from which the desired function should be loaded. There are two ways of doing this:\n\nUsing :: after calling the package name every time we use the function from that package. E.g., dplyr::filter(…) will tell R to explicitly use the function filter from the dplyr library.\nUsing the conflicts_prefer(\"function\",\"package\") function to explicitly declare which version of the function you want to use in the remaining R session (i.e. after conflicts_prefer() is called, e.g., conflict_prefer(\"filter\",\"dplyr\") .\n\n\n\n\n\n\n\n{{&lt; bi question-octagon #6dc83c &gt;}} Question\n\n\n\nWhat do you think is the advantage of using the conflicts_prefer as opposed to the first approach?"
  }
]