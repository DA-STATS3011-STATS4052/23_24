[
  {
    "objectID": "webexercises.html",
    "href": "webexercises.html",
    "title": "Webexercises",
    "section": "",
    "text": "This is a Web Exercise template created by the psychology teaching team at the University of Glasgow, based on ideas from Software Carpentry. This template shows how instructors can easily create interactive web documents that students can use in self-guided learning.\nThe {webexercises} package provides a number of functions that you use in inline R code or through code chunk options to create HTML widgets (text boxes, pull down menus, buttons that reveal hidden content). Examples are given below. Render this file to HTML to see how it works.\nNOTE: To use the widgets in the compiled HTML file, you need to have a JavaScript-enabled browser."
  },
  {
    "objectID": "webexercises.html#example-questions",
    "href": "webexercises.html#example-questions",
    "title": "Webexercises",
    "section": "Example Questions",
    "text": "Example Questions\n\nFill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 25 is: \n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\n\nMultiple Choice (mcq())\n\n“Never gonna give you up, never gonna: let you goturn you downrun awaylet you down”\n“I bless the rainsguess it rainssense the rain down in Africa” -Toto\n\n\n\nTrue or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). TRUEFALSE\n\n\n\nLonger MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n there is a 95% probability that the true mean lies within this range if you repeated the process many times, 95% of intervals calculated in this way contain the true mean 95% of the data fall within this range"
  },
  {
    "objectID": "webexercises.html#checked-sections",
    "href": "webexercises.html#checked-sections",
    "title": "Webexercises",
    "section": "Checked sections",
    "text": "Checked sections\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion"
  },
  {
    "objectID": "webexercises.html#hidden-solutions-and-hints",
    "href": "webexercises.html#hidden-solutions-and-hints",
    "title": "Webexercises",
    "section": "Hidden solutions and hints",
    "text": "Hidden solutions and hints\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  },
  {
    "objectID": "DA_Week1Tasks.html",
    "href": "DA_Week1Tasks.html",
    "title": "Week 1 Tasks",
    "section": "",
    "text": "Tasks\n\nFrom the flights data set, subset the data for the airline carrier JetBlue Airways and produce a scatterplot of their departure delays against arrival delays using ggplot. Interpret the scatterplot.\n\n\n\nProduce a histogram of the hourly temperature from Newark Liberty International (EWR) Airport in 2013 using ggplot. How does the temperature distribution compare with that from all airports in New York City in 2013?\n\n\n\nFor John F. Kennedy Airport, produce boxplots (using a single ggplot command) of the hourly temperature for the months May, June, July, August and September. How does the hourly temperature change during this period?\n\n\n\nTake a look at the mtcars data set within the datasets library relating to data extracted from the 1974 Motor Trend US magazine. Using ggplot, produce a faceted barplot of the categorical variables relating to the number of cylinders (cyl) and the automobiles transmission (am). Interpret the barplot.\n\n\n\nProduce a linegraph of the hourly temperature at LAGuardia (LGA) Airport for the month of October 2013. Interpret the linegraph."
  },
  {
    "objectID": "DA_Week1.html",
    "href": "DA_Week1.html",
    "title": "Week 1: Visualising data using R",
    "section": "",
    "text": "This week we will demonstrate various techniques for visualising data in R using ggplot2. This will also include the correct interpretation and understanding of the different plotting techniques.\n\n\n\n\n\n\nNote\n\n\n\nA lot of the content within this course is based on the open-source book An Introduction to Statistical and Data Science via R and thus is a useful source for additional examples and questions.\n\n\nFirst, start by opening RStudio by going to Desktop -&gt; Maths-Stats -&gt; RStudio. Once RStudio has opened create a new R script by going to File -&gt; New File -&gt; R Script. Next go to File -&gt; Save As... and save the script into your personal drive, either M: or K: (do not save it to the H: drive). We shall now load into R all of the libraries we will need for this session. This can be done by typing the following into your R script:\n\nCodelibrary(ggplot2)\nlibrary(nycflights13)\n\n\nThe libraries can be loaded into R by highlighting them in your script and then clicking on the Run button located in the top right of the script window. The first library ggplot2 allows us to use functions within that package in order to create nicer data visualisations. The second library nycflights13 contains data on flights from New York City in 2013 that we shall be examining."
  },
  {
    "objectID": "DA_Week1.html#over-plotting",
    "href": "DA_Week1.html#over-plotting",
    "title": "Week 1: Visualising data using R",
    "section": "\n3.1 Over-plotting",
    "text": "3.1 Over-plotting\nFrom our scatterplot it is clear to see that the vast majority of the points lie close to zero for both departure and arrival delays. This can make it difficult at times to observe what is going on. This is due to so many points being plotted very close to each other, and often plotted over one another in such a way that it is impossible to count how many points are actually plotted. This is referred to as over-plotting. Using ggplot, there are two ways we can address this problem:\n\nadjust the transparency of the plotted points using the alpha argument.\njitter the points using the geom_jitter function.\n\n\n3.1.1 Adjust transparency\nWe shall first alter the transparency of the points and see if this improves the situation. This is done as follows:\n\nCodeggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + \n  geom_point(alpha = 0.2) +\n  labs(x = \"Departure delay (minutes)\", y = \"Arrival delay (minutes)\",\n       title = \"Alaska Airlines flights leaving NYC in 2013\") \n\n\n\nRelationship between arrival and departure delays with alpha = 0.2.\n\n\n\nThe alpha command ranges between 0 and 1, where 0 relates to 100% transparency, while 1 (default) sets the points to be 100% opaque. By changing the transparency levels of the points we can observe clusters of points that are close to one another as they will be darker than areas of the plot with fewer points clustered together.\n\n3.1.2 Jittering\n\nThe idea behind jittering is that each point is randomly moved, or nudged, slightly from its original position in such a way that clusters of points with the same coordinates can be observed, instead of being plotted on top of one another. To understand this, let’s create a small data set consisting purely of zeros, such that:\n\nCodejitter.example &lt;- matrix(0, nrow = 10, ncol = 2)\n\n\nThis basically creates a 10 by 2 matrix of zeros. You can look at it in the console by simply typing:\n\nCodejitter.example\n\n\nNow, ggplot only works with data frames and not matrices, so we need to convert jitter.example into a data frame. This can be done using:\n\nCodejitter.example &lt;- as.data.frame(jitter.example)\n\n\nThere are functions within R that can be used to determine whether an object is a matrix or a data frame. See\n\nCode?is.matrix\n?is.data.frame\n\n\nNow, let’s plot our toy example:\n\nCodeggplot(data = jitter.example, mapping = aes(x = V1, y = V2)) + \n  geom_point()\n\n\n\nJitter example data scatterplot.\n\n\n\nNote that since changing jitter.example into a data frame, the columns have been given the default variable names V1 and V2. From the plot, if you had never seen our toy example before you would think only a single value was plotted due to them all being zero. If we shift each of the points slightly using jittering we will be able to see them more clearly:\n\nCodeggplot(data = jitter.example, mapping = aes(x = V1, y = V2)) + \n  geom_jitter(width = 0.1, height = 0.1)\n\n\n\nJittered scatterplot of jitter example data.\n\n\n\nNote that geom_jitter has replaced geom_point. Now we can clearly see all 10 observations plotted. The amount of horizontal and vertical jittering of the points is controlled by the width and height arguments within geom_jitter.\nNow that we understand the idea behind jittering, let’s produce a jittered scatterplot of the Alaska data:\n\nCodeggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + \n  geom_jitter(width = 30, height = 30) +\n  labs(x = \"Departure delay (minutes)\", y = \"Arrival delay (minutes)\",\n       title = \"Alaska Airlines flights leaving NYC in 2013\") \n\n\n\nJittered scatterplot of arrival and departure delays.\n\n\n\nNow we can see more of the points plotted within the cluster of points around (0,0). However, since this cluster is so large, it can be argued that jittering has not helped much here. Also, it is important to add enough jitter in order to separate the overlapping of points, however, not so much that we lose any pattern observed within the points. It should also be noted that jittering does not change the actual values of the points within the data set, it is merely used to help with visualising the data."
  },
  {
    "objectID": "DA_Week1.html#percentageproportion-barplots",
    "href": "DA_Week1.html#percentageproportion-barplots",
    "title": "Week 1: Visualising data using R",
    "section": "\n6.1 Percentage/proportion barplots",
    "text": "6.1 Percentage/proportion barplots\nComparing raw frequencies between categories can sometimes be a bit misleading in the sense that raw counts do not consider the total number events (e.g. comparing the number of flights departing from certain origin between two carries should consider the total number of flights from all the origins for those given carries). Instead of plotting the raw frequencies, we can plot the proportions or the percentages per category. \nBy default, ggplot maps at the beginning, using the layer data provided by the user. Alternatively, we can tell ggplot to map after a layer stat() has applied a defined statistical transformation using the after_stat function. The examples we have seen so far have used the default setting stat = \"identity\". Now we will use a prop statistic component to compute the proportion of the number of cases for each level of a categorical variable out of the total counts. To do this we will load the ggstats library which adds new statistics, geometries and positions to ggplot objects.\n\nCodelibrary(ggstats) \nggplot(data = flights, \n       aes(x = carrier, y = after_stat(prop), fill = origin)) +\n  geom_bar(stat = \"prop\")    \n\n\n\n\n\n\n\nNotice that these are the proportions out of the total flights. What if we want the proportions by carrier?\nThe prop statistic imported from the ggstats library allow us to compute custom proportions according to the by aesthetic argument (which should be declared as a factor). For example, if we want to compute the proportions separaely for each value of the carrier, we would write:\n\nCodeggplot(data = flights,\n       aes(x = carrier, \n           y = after_stat(prop), \n           fill = origin, \n           by=factor(carrier))) +  \n  geom_bar(stat = \"prop\") + \n  geom_text(stat = \"prop\",\n            position = position_fill(vjust=0.5))+\n  labs(x = \"Carrier\", y = \"Proportion of flights per carrier\") \n\n\n\n\n\n\n\nNotice that we added the geom_text layer to include the percentages per carrier."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 1: Visualising data using R",
    "section": "",
    "text": "This week we will demonstrate various techniques for visualising data in R using ggplot2. This will also include the correct interpretation and understanding of the different plotting techniques.\n\n\n\n\n\n\nNote\n\n\n\nA lot of the content within this course is based on the open-source book An Introduction to Statistical and Data Science via R and thus is a useful source for additional examples and questions.\n\n\nFirst, start by opening RStudio by going to Desktop -&gt; Maths-Stats -&gt; RStudio. Once RStudio has opened create a new R script by going to File -&gt; New File -&gt; R Script. Next go to File -&gt; Save As... and save the script into your personal drive, either M: or K: (do not save it to the H: drive). We shall now load into R all of the libraries we will need for this session. This can be done by typing the following into your R script:\n\nCodelibrary(ggplot2)\nlibrary(nycflights13)\n\n\nThe libraries can be loaded into R by highlighting them in your script and then clicking on the Run button located in the top right of the script window. The first library ggplot2 allows us to use functions within that package in order to create nicer data visualisations. The second library nycflights13 contains data on flights from New York City in 2013 that we shall be examining."
  },
  {
    "objectID": "index.html#over-plotting",
    "href": "index.html#over-plotting",
    "title": "Week 1: Visualising data using R",
    "section": "\n3.1 Over-plotting",
    "text": "3.1 Over-plotting\nFrom our scatterplot it is clear to see that the vast majority of the points lie close to zero for both departure and arrival delays. This can make it difficult at times to observe what is going on. This is due to so many points being plotted very close to each other, and often plotted over one another in such a way that it is impossible to count how many points are actually plotted. This is referred to as over-plotting. Using ggplot, there are two ways we can address this problem:\n\nadjust the transparency of the plotted points using the alpha argument.\njitter the points using the geom_jitter function.\n\n\n3.1.1 Adjust transparency\nWe shall first alter the transparency of the points and see if this improves the situation. This is done as follows:\n\nCodeggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + \n  geom_point(alpha = 0.2) +\n  labs(x = \"Departure delay (minutes)\", y = \"Arrival delay (minutes)\",\n       title = \"Alaska Airlines flights leaving NYC in 2013\") \n\n\n\nRelationship between arrival and departure delays with alpha = 0.2.\n\n\n\nThe alpha command ranges between 0 and 1, where 0 relates to 100% transparency, while 1 (default) sets the points to be 100% opaque. By changing the transparency levels of the points we can observe clusters of points that are close to one another as they will be darker than areas of the plot with fewer points clustered together.\n\n3.1.2 Jittering\n\nThe idea behind jittering is that each point is randomly moved, or nudged, slightly from its original position in such a way that clusters of points with the same coordinates can be observed, instead of being plotted on top of one another. To understand this, let’s create a small data set consisting purely of zeros, such that:\n\nCodejitter.example &lt;- matrix(0, nrow = 10, ncol = 2)\n\n\nThis basically creates a 10 by 2 matrix of zeros. You can look at it in the console by simply typing:\n\nCodejitter.example\n\n\nNow, ggplot only works with data frames and not matrices, so we need to convert jitter.example into a data frame. This can be done using:\n\nCodejitter.example &lt;- as.data.frame(jitter.example)\n\n\nThere are functions within R that can be used to determine whether an object is a matrix or a data frame. See\n\nCode?is.matrix\n?is.data.frame\n\n\nNow, let’s plot our toy example:\n\nCodeggplot(data = jitter.example, mapping = aes(x = V1, y = V2)) + \n  geom_point()\n\n\n\nJitter example data scatterplot.\n\n\n\nNote that since changing jitter.example into a data frame, the columns have been given the default variable names V1 and V2. From the plot, if you had never seen our toy example before you would think only a single value was plotted due to them all being zero. If we shift each of the points slightly using jittering we will be able to see them more clearly:\n\nCodeggplot(data = jitter.example, mapping = aes(x = V1, y = V2)) + \n  geom_jitter(width = 0.1, height = 0.1)\n\n\n\nJittered scatterplot of jitter example data.\n\n\n\nNote that geom_jitter has replaced geom_point. Now we can clearly see all 10 observations plotted. The amount of horizontal and vertical jittering of the points is controlled by the width and height arguments within geom_jitter.\nNow that we understand the idea behind jittering, let’s produce a jittered scatterplot of the Alaska data:\n\nCodeggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + \n  geom_jitter(width = 30, height = 30) +\n  labs(x = \"Departure delay (minutes)\", y = \"Arrival delay (minutes)\",\n       title = \"Alaska Airlines flights leaving NYC in 2013\") \n\n\n\nJittered scatterplot of arrival and departure delays.\n\n\n\nNow we can see more of the points plotted within the cluster of points around (0,0). However, since this cluster is so large, it can be argued that jittering has not helped much here. Also, it is important to add enough jitter in order to separate the overlapping of points, however, not so much that we lose any pattern observed within the points. It should also be noted that jittering does not change the actual values of the points within the data set, it is merely used to help with visualising the data."
  },
  {
    "objectID": "index.html#percentageproportion-barplots",
    "href": "index.html#percentageproportion-barplots",
    "title": "Week 1: Visualising data using R",
    "section": "\n6.1 Percentage/proportion barplots",
    "text": "6.1 Percentage/proportion barplots\nComparing raw frequencies between categories can sometimes be a bit misleading in the sense that raw counts do not consider the total number events (e.g. comparing the number of flights departing from certain origin between two carries should consider the total number of flights from all the origins for those given carries). Instead of plotting the raw frequencies, we can plot the proportions or the percentages per category. \nBy default, ggplot maps at the beginning, using the layer data provided by the user. Alternatively, we can tell ggplot to map after a layer stat() has applied a defined statistical transformation using the after_stat function. The examples we have seen so far have used the default setting stat = \"identity\". Now we will use a prop statistic component to compute the proportion of the number of cases for each level of a categorical variable out of the total counts. To do this we will load the ggstats library which adds new statistics, geometries and positions to ggplot objects.\n\nCodelibrary(ggstats) \nggplot(data = flights, \n       aes(x = carrier, y = after_stat(prop), fill = origin)) +\n  geom_bar(stat = \"prop\")    \n\n\n\n\n\n\n\nNotice that these are the proportions out of the total flights. What if we want the proportions by carrier?\nThe prop statistic imported from the ggstats library allow us to compute custom proportions according to the by aesthetic argument (which should be declared as a factor). For example, if we want to compute the proportions separaely for each value of the carrier, we would write:\n\nCodeggplot(data = flights,\n       aes(x = carrier, \n           y = after_stat(prop), \n           fill = origin, \n           by=factor(carrier))) +  \n  geom_bar(stat = \"prop\") + \n  geom_text(stat = \"prop\",\n            position = position_fill(vjust=0.5))+\n  labs(x = \"Carrier\", y = \"Proportion of flights per carrier\") \n\n\n\n\n\n\n\nNotice that we added the geom_text layer to include the percentages per carrier."
  },
  {
    "objectID": "Solutions/Week1TaskSolutions.html",
    "href": "Solutions/Week1TaskSolutions.html",
    "title": "Week 1 Task Solutions",
    "section": "",
    "text": "library(ggplot2)\nlibrary(nycflights13)\nlibrary(datasets)\n\n\nTasks\n\nFrom the flights data set, subset the data for the airline carrier JetBlue Airways and produce a scatterplot of their departure delays against arrival delays using ggplot. Interpret the scatterplot.\n\n\nJetBlue &lt;- flights[flights$carrier == \"B6\", ]\nggplot(data = JetBlue, mapping = aes(x = dep_delay, y = arr_delay)) +\n  geom_point() +\n  labs(x = \"Departure delay (minutes)\", y = \"Arrival delay (minutes)\",\n       title = \"JetBlue Airways flights leaving NYC in 2013\")\n\nWarning: Removed 586 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nProduce a histogram of the hourly temperature from Newark Liberty International (EWR) Airport in 2013 using ggplot. How does the temperature distribution compare with that from all airports in New York City in 2013?\n\n\nEWR.temps &lt;- weather[weather$origin == \"EWR\", ]\nggplot(data = EWR.temps, mapping = aes(x = temp)) +\n  geom_histogram(bins = 60, color = \"white\") +\n  labs(x = \"Temperature\", y = \"Frequency\",\n       title = \"Hourly temperature at Newark Liberty International Airport in 2013\")\n\nWarning: Removed 1 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\nFor John F. Kennedy Airport, produce boxplots (using a single ggplot command) of the hourly temperature for the months May, June, July, August and September. How does the hourly temperature change during this period?\n\n\nJFK.temps &lt;- weather[weather$origin == \"JFK\" & weather$month %in%  5:9, ]\nggplot(data = JFK.temps, mapping = aes(x = factor(month), y = temp)) +\n   geom_boxplot(fill = \"blue\") +\n   labs(x = \"Month\", y = \"Temperature (Hourly)\",\n        title = \"Hourly temperature at John F. Kennedy Airport in 2013\")  +\n     scale_x_discrete(labels = c(\"May\", \"June\", \"July\", \"August\", \"September\"))\n\n\n\n\n\nTake a look at the mtcars data set within the datasets library relating to data extracted from the 1974 Motor Trend US magazine. Using ggplot, produce a faceted barplot of the categorical variables relating to the number of cylinders (cyl) and the automobiles transmission (am). Interpret the barplot.\n\n\nmt.cyls &lt;- as.data.frame(table(mtcars$cyl, mtcars$am))\ncolnames(mt.cyls) &lt;- c(\"cylinders\", \"transmission\", \"number\")\nggplot(data = mt.cyls, mapping = aes(x = cylinders, y = number, fill = transmission)) +\n geom_col() +\n  facet_wrap(~ transmission, ncol = 1) +\n  labs(x = \"Cylinders\", y = \"Count\",\n        title = \"Number of cylinders by transmission from the 1974 Motor Trend US magazine\")\n\n\n\n\n\nProduce a linegraph of the hourly temperature at LAGuardia (LGA) Airport for the month of October 2013. Interpret the linegraph.\n\n\nLGA.Oct &lt;- weather[weather$origin == \"LGA\" & weather$month == 10, ]\nggplot(data = LGA.Oct, mapping = aes(x = time_hour, y = temp)) +\n  geom_line() +\n  labs(x = \"Time (Hours)\", y = \"Temperature\",\n       title = \"Hourly Temperature at LAGuardia Airport in October 2013\")"
  }
]