---
title: "Week 8: Collaborative Programming 2"
engine: knitr
format:
  pdf:
    latex-auto-install: true
  html:
    code-link: true
    code-fold: true
    code-tools:
      source: false
      toggle: true
    toc: true
    toc-location: left
    toc-title: Contents
    number-sections: true
editor: visual
editor_options:
  chunk_output_type: console
---

# Download a project

There are two main ways to download a project to your computer from GitHub and you should pick the one that makes sense for what you want to do:

## Download a `.zip` package

The most straightforward method is to download a `.zip` file containing the latest version of the files.

![](images/image22.png)

Click on the green 'Code' button, then the 'Download ZIP' option. This will download a single file, archived and compressed using the common [ZIP](https://en.wikipedia.org/wiki/ZIP_(file_format)) file format. Double-clicking the file will extract its contents to a folder next to the original .zip file.

An important distinction here is that you are downloading just the codebase --- the files and folders of the repository --- and not the Git repository itself. This means you lose some of the key functionality of Git, for example, if the project maintainers make any updates to the project, you will need to manually re-download the `.zip` file and extract it again to see those changes, instead of being able to easily pull these changes (more on this in the next example!).

## Clone

Another way to download a project to your computer is to use Git's `clone` method. To use `clone`, we need to tell Git installed on our computer to make a copy (or 'clone') of another repository, in this case from GitHub.

::: panel-tabset

## Command-line

First, we need to copy the address of the repository we want to clone.

![](images/image23.png)

1. Click on the green button labelled "Code"

2. Choose either HTTPS or SSH, depending on how you connect to GitHub with Git on your computer (see the Configuration section of Unit 1)

3. Copy the address

Then in your terminal, navigate to your desired folder and issue the following command:

```{bash eval=FALSE}
git clone <address>
```

You should now see the repository has been cloned to your computer.

## GitHub Desktop

First, navigate to the repository you want to clone on the GitHub website.

![](images/image24.png)

1. Click on the green button labelled 'Code'

2. Click on 'Open with GitHub Desktop'

3. You should then see a window like this pop up in GitHub Desktop:

![](images/image25.png)

1. The URL of the repository on GitHub has automatically been populated

2. Choose where you would like the repository to be cloned to on your computer

3. Click 'Clone'

:::

Using this approach, we have a copy of the files and folders in the repository, but we have also copied the metadata which makes this into a Git repository. To answer the example above, now if a project maintainer makes an update to the project on GitHub, we can easily sync both versions:

::: panel-tabset

## Command-line

In the project folder just issue the `pull` command:

``` {bash eval=FALSE}
git pull
```

## GitHub Desktop

On GitHub Desktop, click the 'Fetch origin' button in the top bar:

![](images/image26.png)

:::

# Branching and integrating

In this tutorial we are going to learn how to create a branch and make changes to it, then integrate this branch back into the main branch. This is particularly helpful when working collaboratively.

In Git, a branch represents a distinct version of the `main` repository, serving as a snapshot of your changes. When implementing new features or addressing issues, regardless of their scope, creating a new branch is the practice to isolate your modifications. This approach enhances code stability in the main branch and affords you the opportunity to refine your history before merging it into the primary codebase.

When the work is complete, a branch can be merged with the main project.
You can even switch between branches and work on different projects without them interfering with each other.

We are also going to learn about Git's stash feature, and how it can help you when switching between branches.

## Create a new local Git repository

Let's create a new folder on our computer called 'tutorial3' and initialise Git:

::: panel-tabset

## Command-line

Create a directory for your 'tutorial3' work:

```{bash eval=FALSE}
mkdir tutorial3
cd tutorial3
```

and run git init inside:

```{bash eval=FALSE}
git init
```

```

Initialized empty Git repository in /Users/staff/Work/tutorial3/.git/

```

## GitHub Desktop

Choose `File > New Repository...` from the menu.

In the "Create a New Repository" form, name the repository "tutorial3", set the "Local Path" field to your preferred location and click the "Create Repository" button:

![](images/image27.png)

:::

Add the following file to the repository:

::: callout-note

## example.md

Hello

:::

Then add and commit the file:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git add example.md
git commit -m "Add example.md"
```

## GitHub Desktop

![](images/image28.png)

:::

Next, let's create a branch named `shout` based on this commit.

::: panel-tabset

## Command-line

We can create a new branch and switch to it using the switch command with the -c flag:

```{bash eval=FALSE}
git switch -c shout
```

```

Switched to a new branch 'shout'

```

## GitHub Desktop

![](images/image29.png)

:::

Add an exclamation mark to the end of the word within the `example.md` file:

::: callout-note

## example.md

Hello!

:::

Then commit the change:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git add example.md
```

```

git commit -m "Add exclamation mark"

[shout eed4222] Add exclamation mark

1 file changed, 1 insertion(+), 1 deletion(-)

```

## GitHub Desktop

![](images/image30.png)

:::

Let's take a quick look at the log:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git log --all --decorate --oneline --graph
```

```

* eed4222 (HEAD -> shout) Add exclamation mark

* 8f601cd (main) Add example.md

```

## GitHub Desktop

![](images/image31.png)

:::

Now let's try merging the branch back into the `main` branch. First, switch back to `main`:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch main
```

```

Switched to branch 'main'

````

(Note, we don't include the -c flag as this branch already exists)

## GitHub Desktop

![](images/image32.png)

:::

Then merge our `shout` branch into `main`:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git merge shout
```

```

Updating 8f601cd..eed4222

Fast-forward

example.md | 2 +-

1 file changed, 1 insertion(+), 1 deletion(-)

```

## GitHub Desktop

![](images/image33.png)

![](images/image34.png)

:::

We can check that the version of our file in the main branch now has the exclamation mark:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
cat example.md
```

```

Hello!

```

## GitHub Desktop

![](images/image35.png)

:::

As the change is now reflected in our `main` branch, we can safely delete our `shout` branch:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git branch --delete shout
```

```

Deleted branch shout (was eed4222).

```

## GitHub Desktop

Simply right click on the `shout` branch here and select Delete

![](images/image36.png)

:::

# Switching branches with the help of Git stash

Given the example above, branching with Git appears straightforward. However, this is not always the case. Sometimes Git won't let you switch branches. Let's create a scenario where we see an error when switching branches, try to understand why Git is stopping us, and look at a simple universal solution.

Create and switch to a new branch called `question`:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch -c question
```

```

Switched to a new branch 'question'

```

## GitHub Desktop

From the main menu select Branch > New Branch and name the branch 'question':

![](images/image37.png)

:::

Let's make a change to the file by changing the exclamation mark to a question mark:

::: callout-note

## example.md

Hello?

:::

Add the change to the stage and commit:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git add example.md
```

```

git commit -m "Change exclamation mark to question mark"

[question 49806f4] Change exclamation mark to question mark

1 file changed, 1 insertion(+), 1 deletion(-)

```

## GitHub Desktop

![](images/image38.png)

:::

Now let's make another change to our file:

::: callout-note

## example.md

Hello?

Is it me you're looking for?

:::

This time, instead of committing, we will try to switch back to the main branch, and Git will tell us we can't switch branches currently as we would lose our local changes (see the next example for the error). Committing our latest change would let us then switch the branch, but what if we don't want to commit the change?

::: panel-tabset

## Command-line

A common scenario is that you have started working on a problem, then when you check Git you realise you are working on the wrong branch, but now you have uncommitted changes and can't switch branches. For this scenario, there is the **stash**. Think of it as a clipboard with cut-and-paste functionality like you would have in a text editor, which will let us 'cut' our changes and store them somewhere safe, let us switch branches, and then paste them.

Let's try it now:

```{bash eval=FALSE}
git switch main
```

```

error: Your local changes to the following files would be overwritten by checkout:

example.md

Please commit your changes or stash them before you switch branches.

Aborting

```

Git complains that we will lose our local changes. Let's try out the stash:

```{bash eval=FALSE}
git stash
```

```

Saved working directory and index state WIP on question: 49806f4 Change exclamation mark to question mark

```

Git has used the abbreviation 'WIP' which stands for 'Work In Progress'.

Now if we look at our file we'll see the 2nd line has disappeared:

```{bash eval=FALSE}
cat example.md
```

```

Hello?

```

We can ask Git to show us our stash:

```{bash eval=FALSE}
git stash show
```

```

example.md | 2 ++

1 file changed, 2 insertions(+)

```

This shows us which files have changed. We can add a `-p` (for 'patch') flag which will show us a diff:

```{bash eval=FALSE}
git stash show -p
```

```

diff --git a/example.md b/example.md

index ebbc6cd..472b4c5 100644

--- a/example.md

+++ b/example.md

@@ -1,2 +1,4 @@

Hello?

+Is it me you're looking for?

+
```

Now our local copy is 'clean' and we can safely switch branches:
```{bash eval=FALSE}
git switch main
```

```
Switched to branch 'main'
```

And we can apply our change to a different branch:

``` {bash eval=FALSE}
git stash apply
```

```

Auto-merging example.md

On branch main

Changes not staged for commit:

(use "git add <file>..." to update what will be committed)

(use "git restore <file>..." to discard changes in working directory)

modified:   example.md

no changes added to commit (use "git add" and/or "git commit -a")

```

And now if we look at the file, we'll see our stashed change has been applied, but there is no question mark on "Hello?" as this change still resides on the `question` branch:

```{bash eval=FALSE}
cat example.md
```

```

Hello!

Is it me you're looking for?

```

We can now safely remove our stashed version:

```{bash eval=FALSE}
git stash drop
```

```

Dropped refs/stash@{0} (00b8825ce0b6a0e3c2877f3c42c828fb4da4c922)

```

It's important to `drop` the stash afterwards, or you'll end up with several items in the stash that could lead to applying the wrong one. Git has a shortcut for 'apply then drop' which is `git stash pop`.

## GitHub Desktop

Luckily for GitHub Desktop users, this stashing and stash-applying process is all handled by clicking a button.

Once we try to switch to the `main` branch:

![](images/image39.png)

GitHub Desktop offers us two options:

* **Leave my changes on question** allows us to stash the changes and come back to the branch later and apply the stash

* **Bring my changes to main** automates the process of stashing the changes, switching to the desired branch, and applying the stash.

For this tutorial, we will choose the latter option— 'Bring my changes to main':

![](images/image40.png)

And now if we look at the file, we'll see our stashed change has been applied, but no question mark as this change still resides on the `question` branch:

![](images/image41.png)

:::

# Merging branches with the help of Git merge

Let's stage and commit our 2nd line ``Is it me you're looking for?'' from then previous section:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git add example.md
```
```
git commit -m "Add 2nd line"
[main 6859b82] Add 2nd line
1 file changed, 2 insertions(+)
```

## GitHub Desktop

![](images/image42.png)

:::

Let's merge in the question mark.

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git merge question
```

```

Auto-merging example.md

Merge made by the 'ort' strategy.

example.md | 2 +-

1 file changed, 1 insertion(+), 1 deletion(-)

```

## GitHub Desktop

![](images/image44.png)

:::

Let's check the file:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
cat example.md
```

```

Hello?

Is it me you're looking for?

```

## GitHub Desktop

![](images/image45.png)

:::

# Merge conflicts

In the examples above we have introduced create a branch, making some changes and then integrating this back into main. However, what happens if you make a change to a line in a file on one branch, then you (or someone else) changes the same line of the same file on a different branch, what should Git do when you want to merge? This is a so-called **merge conflict**.

In this section, we're going to create a simple scenario where we will run into **merge conflicts** and explore two different ways to resolve them.

When using `merge` to combine two branches, Git will first find a common "base commit" between the two branches, then compare the changes since this commit and attempt to compile a change list known as a "merge commit".

Git tries to automate this process as much as possible, but if it finds two conflicting changes it won't try to guess which change should overrule the other. This usually happens when the same line in a file has been changed in both branches. In this case, while attempting to compile the merge commit, Git will go into a "merge conflict" state, which involves updating the conflicting files in the filesystem (or "working tree") with some special formatting to show you what it cannot guess, and Git will not allow you to commit the merge until you have manually decided what you want to happen.

Let's create a branch named `capitalise` and switch to it:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch -c capitalise
```

```
Switched to a new branch 'capitalise'
```

## GitHub Desktop

![](images/image46_1.png)

:::

Now we're going to make a different change to the file on the main branch. This time change the contents to the following:

::: callout-note

## example.md

HELLO

:::

Then commit the change:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git add example.md
git commit -m "Capitalise example.md"
```

```
[capitalise 3da9dfb] Capitalise example.md

1 file changed, 1 insertion(+), 3 deletions(-)

```

## GitHub Desktop

![](images/image47.png)

:::

Now switch back to the `main` branch:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch main
```

```

Switched to branch 'main'

```

## GitHub Desktop

![](images/image48.png)

:::

The file should look like it did before the capitalisation, as that change is isolated on the `capitalise` branch:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
cat example.md
```

```
Hello?

Is it me you're looking for?
```

## GitHub Desktop

![](images/image49.png)

:::

Now we're going to make a different change to the file on the main branch. This time change the contents to the following:

::: callout-note

## example.md

Hello.

:::

Stage and commit the change:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git add example.md
git commit -m "Add full stop to end of the line in example.md"
```

```
[main 7888fef] Add full stop to end of the line in example.md

1 file changed, 1 insertion(+), 3 deletions(-)

```

## GitHub Desktop

![](images/image50.png)

:::

Let's see what happens when we try to merge:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git merge capitalise
```

```
Auto-merging example.md

CONFLICT (content): Merge conflict in example.md

Automatic merge failed; fix conflicts and then commit the result.

```

## GitHub Desktop

![](images/image51.png)

Let's see what happens when we try to merge:

![](images/image52.png)

Next, GitHub Desktop will tell you which files need attention, and instruct you to open them in your preferred code editor.

![](images/image53.png)

The Continue Merge button is disabled, as we need to resolve the conflicts in our files.

:::

Let's open up `example.md` in our preferred editor and see what is happening:

```

<<<<<<< HEAD

Hello.

=======

HELLO

>>>>>>> capitalise

```

Git has modified our file to delineate a change that it cannot merge. The line (or lines) between `<<<<<<<` and `======` here show what you already had (you can tell because HEAD points to your current branch). The line (or lines) between `=======` and `>>>>>>>` is what was introduced by the other commit, in this case from the capitalise branch.

If this was a large file with multiple lines changed, Git will automatically merge the parts that it can, and will highlight the parts it can't like this, and we will have to go through each conflict and manually resolve them.

Let's have a look at Git's status:

::: panel-tabset

## Command-line

```{bash eval=FALSE}

git status -v

```

```

On branch main

You have unmerged paths.

(fix conflicts and run "git commit")

(use "git merge --abort" to abort the merge)

Unmerged paths:

(use "git add <file>..." to mark resolution)

both modified:   example.md

* Unmerged path example.md

no changes added to commit (use "git add" and/or "git commit -a")

```

## GitHub Desktop

Note that GitHub Desktop displays the conflict icon besides each file that needs attention:

![](images/image54.png)

:::

Git's method for displaying merge conflicts by modifying the source files makes it very straightforward for us to resolve, by just manually editing the files as we want. However Git knows that there is now a danger that you could commit this merge conflict syntax, and when working with code, this will almost certainly cause a syntax error and break your project. So Git tries to protect us against this by going into a "merge conflict" state, where it wants you to either resolve or abort this action before you do anything else.

Let's manually edit our file to what we want, like a mixture of both changes:

::: callout-note
## example.md

HELLO.

:::

::: panel-tabset

## Command-line

Add the file to the stage to mark it as resolved:

```{bash eval=FALSE}
git add example.md
```

We can see Git is no longer in a merge conflict state:

```{bash eval=FALSE}
git status -v
```

```

On branch main

All conflicts fixed but you are still merging.

(use "git commit" to conclude merge)

Changes to be committed:

modified:   example.md

diff --git a/example.md b/example.md

index 8b94e8e..c886167 100644

--- a/example.md

+++ b/example.md

@@ -1,2 +1,2 @@

-Hello.

+HELLO.

```

## GitHub Desktop

Once the special `<<<<<<<`, `======` and `>>>>>>>` syntax is removed from our files, GitHub Desktop detects that our merge conflict has been resolved and allows us to 'Continue Merge':

![](images/image55.png)

:::

And we can conclude the merge.

::: panel-tabset

## Command-line

I use the `--no-edit` flag to tell Git to use the default message for a merge commit:

```{bash eval=FALSE}

git commit --no-edit

```

```

[main fe2d762] Merge branch 'capitalise'

```

## GitHub Desktop

![](images/image56.png)

:::

We have integrated our branch into the `main` branch and we can safely delete our short-lived branch `capitalise`:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git branch --delete capitalise
```

```
Deleted branch capitalise (was 3da9dfb).
```

## GitHub Desktop

![](images/image57.png)

:::


# A better approach to resolving merge conflicts

Although Git allows us to resolve a merge conflict as above, this is not considered the "best practice" way to achieve this result. We ended up with something different from both our branch contents and the main branch contents all in one merge conflict resolution, with no opportunity for oversight by someone else working on the project- i.e. we managed to skip the Code Review (aka. Pull Request) stage.

A Pull Request on GitHub should be thought of as a preparation and checking stage for a Git `merge` (or `rebase`) operation. GitHub needs a 'base' branch to 'merge into', usually `main`, and a 'compare' branch to 'merge from'. If Git has indicated that a merge will result in a merge conflict, for the base branch as above, GitHub will not easily let you perform the merge process until this is fixed. So let's see how this could have been done differently.

Let's create a new branch called `goodbye`:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch -c goodbye
```
```
Switched to a new branch 'goodbye'
```

## GitHub Desktop
From the main menu select Branch > New Branch and name the branch 'goodbye':
![](images/image58.png)

:::

Let's update the file like so:

::: callout-note
## example.md
GOODBYE
:::

And commit the change:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git add example.md
git commit -m "Change hello to goodbye in example.md"
```
```
[goodbye 753e225] Change hello to goodbye in example.md
1 file changed, 1 insertion(+), 1 deletion(-)
```

## GitHub Desktop
From the main menu select Branch > New Branch and name the branch 'goodbye':
![](images/image59.png)

:::

Switch back to the main branch:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch main
```
```
Switched to branch 'main'
```

## GitHub Desktop
![](images/image60.png)

:::

Make a change to the file on the main branch:

::: callout-note
## example.md
HELLO
:::

And commit.

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git commit -m "Remove full stop in example.md"
```
```
[main 27c4cc0] Remove full stop in example.md
1 file changed, 1 insertion(+), 1 deletion(-)
```

## GitHub Desktop
![](images/image61.png)

:::

Then try to merge:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git merge goodbye
```
```
Auto-merging example.md
CONFLICT (content): Merge conflict in example.md
Automatic merge failed; fix conflicts and then commit the result.
```

## GitHub Desktop
![](images/image62.png)
![](images/image63.png)

:::

And again we have a merge conflict. This time, let's abort the merge:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git merge --abort
```

## GitHub Desktop
![](images/image64.png)

:::

Now switch back to the `goodbye` branch:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch goodbye
```
```
Switched to branch 'goodbye'
```

## GitHub Desktop
![](images/image65.png)

:::

And **merge `main` into our short-lived `goodbye` branch**:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git merge main
```
```
Auto-merging example.md
CONFLICT (content): Merge conflict in example.md
Automatic merge failed; fix conflicts and then commit the result.
```

## GitHub Desktop
![](images/image66.png)
![](images/image67.png)

:::

Now if we head to our preferred code editor, we have almost the same merge conflict to resolve (except `HEAD` is now our `goodbye` branch):

```
<<<<<<< HEAD
GOODBYE
=======
HELLO
>>>>>>> main
```

And we can manually resolve it as before, this time with some Beatles lyrics:

::: callout-note
## example.md
You say GOODBYE and I say HELLO
:::

::: panel-tabset

## Command-line
And `add` to mark the conflict resolved:

```{bash eval=FALSE}
git add example.md
```
And commit the change.

```{bash eval=FALSE}
git commit --no-edit
```
```
[goodbye 34ca84f] Merge branch 'main' into goodbye
```

## GitHub Desktop
GitHub Desktop has automatically detected that our merge conflict has been resolved:
![](images/image68.png)

:::

And now our branch is ready for Code Review on GitHub via a Pull Request.

When we switch back to the `main` branch:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git switch main
```
```
Switched to branch 'main'
```

## GitHub Desktop

![](images/image69.png)

:::

Our change can be merged without a conflict. We will use `git squash` in the next steps.
Squashing allows you to combine multiple commits in your branch's history into a single commit. This can help keep your repository's history more readable and understandable.


::: panel-tabset

## Command-line
"Fast-forward" in Git terms means an automatic merge, or in other words, our merge will not result in a conflict.

The `goodbye` branch has 2 commits, which we can see by asking `git log` to compare it to the `main` branch:

```{bash eval=FALSE}
git log --oneline main..goodbye
```
```
34ca84f Merge branch 'main' into goodbye
753e225 Change hello to goodbye in example.md
```
Since we resolved the merge conflict with Beatles lyrics when merging the `main` branch into the `goodbye` branch, neither of these commit messages does a good job describing what we are about to integrate into `main`. So instead of transferring both commits to the `main` 'as is', let's 'squash' them into one:

```{bash eval=FALSE}
git merge --squash goodbye
```
```
Updating 27c4cc0..34ca84f
Fast-forward
Squash commit -- not updating HEAD
example.md | 2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
```

Then commit the squashed change with a more descriptive message:

```{bash eval=FALSE}
git commit -m 'Change to Beatles lyrics'
```
```
[main 08a1ff2] Change to Beatles lyrics
1 file changed, 1 insertion(+), 1 deletion(-)
```

## GitHub Desktop
![](images/image70.png)
![](images/image71.png)


This time instead of clicking 'Create a merge commit', click the little arrow on the right of the button and select 'Squash and merge':

![](images/image72.png)

Now if we look at the history tab we can see a commit with the message 'Squashed commit of the following:'. If you click on 'Expand' on the right, we can see the description of the commit has a log of the commits that were squashed into this one:

![](images/image73.png)

Let's change the title to something more descriptive by right-clicking on the commit message and selecting 'Amend commit...':

![](images/image74.png)

Then change the message to 'Change to Beatles lyrics' and click 'Amend last commit':

![](images/image75.png)

:::


"Fast-forward" in Git terms means an automatic merge, or in other words, our merge will not result in a conflict.

Finally, you can safely delete the goodbye branch:

::: panel-tabset

## Command-line

```{bash eval=FALSE}
git branch --delete goodbye
```
```
error: The branch 'goodbye' is not fully merged.
If you are sure you want to delete it, run 'git branch -D goodbye'.
```

## GitHub Desktop
![](images/image76.png)

:::

So to recap, we have prepared our branch for integration by first combining any new changes from the `main` branch into our branch and resolving the merge conflicts in isolation, creating a "final version" of the change we want to make with our branch ready to be checked, before attempting to integrate our branch back into the `main` branch.

If you need to keep your short-lived branch open for some reason, it's advised to merge any recent changes from `main` into your branch often, to avoid painful merge conflicts later.
