[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 8: Collaborative Coding 2",
    "section": "",
    "text": "This week’s material is based on the Version Control Course from the School of Mathematics and Statistics at Glasgow University. The content has been reduced to fit the class structure. At the end this week, please provide some feedback on the materials on https://uofg.qualtrics.com/jfe/form/SV_56jF2LNgmA6qrhY."
  },
  {
    "objectID": "index.html#working-with-other-people",
    "href": "index.html#working-with-other-people",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n3.1 Working with other people",
    "text": "3.1 Working with other people\nBranches enable a team to work on the same files at the same time. However, it doesn’t work like other collaboration tools like Google Docs or Microsoft 365, where you can see other users editing parts of a file as you work. Instead, branches allow collaborators to work in isolation, not worrying about what others are up to, and when the time comes to integrate changes into the default branch, Git provides the tools to ensure you don’t overwrite someone else’s work (or, if you do, you do it very intentionally!)."
  },
  {
    "objectID": "index.html#grouping-commits",
    "href": "index.html#grouping-commits",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n3.2 Grouping commits",
    "text": "3.2 Grouping commits\nEven if you’re working on your own, branches can be used as a tool to group multiple commits. For example, when working on a new feature for a project, you can create a branch named after your feature, then continue to use Git best practices by breaking your task into small manageable chunks, and complete one thing at a time and commit it. Then when it comes time to integrate your changes to the main branch, you can choose to “squash” those small commits down into one “merge commit” named after your new feature. This helps to keep the commit history on the default branch minimal and tidy, only showing completed tasks such as new features and bug fixes."
  },
  {
    "objectID": "index.html#create-a-new-local-git-repository",
    "href": "index.html#create-a-new-local-git-repository",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n5.1 Create a new local Git repository",
    "text": "5.1 Create a new local Git repository\nLet’s create a new folder on our computer called ‘tutorial3’ and initialise Git:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nCreate a directory for your ‘tutorial3’ work:\n\nCodemkdir tutorial3\ncd tutorial3\n\n\nand run git init inside:\n\nCodegit init\n\n\n\nInitialized empty Git repository in /Users/staff/Work/tutorial3/.git/\n\n\n\nChoose File &gt; New Repository... from the menu.\nIn the “Create a New Repository” form, name the repository “tutorial3”, set the “Local Path” field to your preferred location and click the “Create Repository” button:\n\n\n\n\nAdd the following file to the repository:\n\n\n\n\n\n\nexample.md\n\n\n\nHello\n\n\nThen add and commit the file:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit add example.md\ngit commit -m \"Add example.md\"\n\n\n\n\n\n\n\n\nNext, let’s create a branch named shout based on this commit.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nWe can create a new branch and switch to it using the switch command with the -c flag:\n\nCodegit switch -c shout\n\n\n\nSwitched to a new branch 'shout'\n\n\n\n\n\n\n\nAdd an exclamation mark to the end of the word within the example.md file:\n\n\n\n\n\n\nexample.md\n\n\n\nHello!\n\n\nThen commit the change:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit add example.md\n\n\n\ngit commit -m \"Add exclamation mark\"\n\n[shout eed4222] Add exclamation mark\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\nLet’s take a quick look at the log:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit log --all --decorate --oneline --graph\n\n\n\n* eed4222 (HEAD -&gt; shout) Add exclamation mark\n\n* 8f601cd (main) Add example.md\n\n\n\n\n\n\n\nNow let’s try merging the branch back into the main branch. First, switch back to main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit switch main\n\n\n\nSwitched to branch 'main'\n\n(Note, we don’t include the -c flag as this branch already exists)\n\n\n\n\n\n\nThen merge our shout branch into main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit merge shout\n\n\n\nUpdating 8f601cd..eed4222\n\nFast-forward\n\nexample.md | 2 +-\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\n\nWe can check that the version of our file in the main branch now has the exclamation mark:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodecat example.md\n\n\n\nHello!\n\n\n\n\n\n\n\nAs the change is now reflected in our main branch, we can safely delete our shout branch:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit branch --delete shout\n\n\n\nDeleted branch shout (was eed4222).\n\n\n\nSimply right click on the shout branch here and select Delete"
  },
  {
    "objectID": "index.html#download-a-.zip-package",
    "href": "index.html#download-a-.zip-package",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n1.3 Download a .zip package",
    "text": "1.3 Download a .zip package\nThe most straightforward method is to download a .zip file containing the latest version of the files.\n\nClick on the green ‘Code’ button, then the ‘Download ZIP’ option. This will download a single file, archived and compressed using the common ZIP file format. Double-clicking the file will extract its contents to a folder next to the original .zip file.\nAn important distinction here is that you are downloading just the codebase — the files and folders of the repository — and not the Git repository itself. This means you lose some of the key functionality of Git, for example, if the project maintainers make any updates to the project, you will need to manually re-download the .zip file and extract it again to see those changes, instead of being able to easily pull these changes (more on this in the next example!)."
  },
  {
    "objectID": "index.html#clone",
    "href": "index.html#clone",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n1.2 Clone",
    "text": "1.2 Clone\nOne way to download a project to your computer is to use Git’s clone method. To use clone, we need to tell Git installed on our computer to make a copy (or ‘clone’) of another repository, in this case from GitHub.\nClone is a Git feature that allows a user to make a copy of a repository, including all the associated metadata on their computer so they can work on it. This is an essential feature and makes sense for a team of collaborators, with read-and-write privileges to the repository, all working on a project together.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nFirst, we need to copy the address of the repository we want to clone.\n\n\nClick on the green button labelled “Code”\nChoose either HTTPS or SSH, depending on how you connect to GitHub with Git on your computer (see the Configuration section of Unit 1)\nCopy the address\n\nThen in your terminal, navigate to your desired folder and issue the following command:\n\nCodegit clone &lt;address&gt;\n\n\nYou should now see the repository has been cloned to your computer.\n\n\nFirst, navigate to the repository you want to clone on the GitHub website.\n\n\nClick on the green button labelled ‘Code’\nClick on ‘Open with GitHub Desktop’\nYou should then see a window like this pop up in GitHub Desktop:\n\n\n\nThe URL of the repository on GitHub has automatically been populated\nChoose where you would like the repository to be cloned to on your computer\nClick ‘Clone’\n\n\n\n\nUsing this approach, we have a copy of the files and folders in the repository, but we have also copied the metadata which makes this into a Git repository. To answer the example above, now if a project maintainer makes an update to the project on GitHub, we can easily sync both versions:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nIn the project folder just issue the pull command:\n\nCodegit pull\n\n\n\n\nOn GitHub Desktop, click the ‘Fetch origin’ button in the top bar:"
  },
  {
    "objectID": "index.html#add-collaborator",
    "href": "index.html#add-collaborator",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n1.1 Add collaborator",
    "text": "1.1 Add collaborator\nTo collaborate with users in a repository that belongs to your personal account on GitHub.com, you can invite the users as collaborators."
  },
  {
    "objectID": "index.html#download-a-project",
    "href": "index.html#download-a-project",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n1.2 Download a project",
    "text": "1.2 Download a project\nThere are two main ways to download a project to your computer from GitHub and you should pick the one that makes sense for what you want to do:\n\n1.2.1 Download a .zip package\nThe most straightforward method is to download a .zip file containing the latest version of the files.\n\nClick on the green ‘Code’ button, then the ‘Download ZIP’ option. This will download a single file, archived and compressed using the common ZIP file format. Double-clicking the file will extract its contents to a folder next to the original .zip file.\nAn important distinction here is that you are downloading just the codebase — the files and folders of the repository — and not the Git repository itself. This means you lose some of the key functionality of Git, for example, if the project maintainers make any updates to the project, you will need to manually re-download the .zip file and extract it again to see those changes, instead of being able to easily pull these changes (more on this in the next example!).\n\n1.2.2 Clone\nAnother way to download a project to your computer is to use Git’s clone method. To use clone, we need to tell Git installed on our computer to make a copy (or ‘clone’) of another repository, in this case from GitHub.\nClone is a Git feature that allows a user to make a copy of a repository, including all the associated metadata on their computer so they can work on it. This is an essential feature and makes sense for a team of collaborators, with read-and-write privileges to the repository, all working on a project together.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nFirst, we need to copy the address of the repository we want to clone.\n\n\nClick on the green button labelled “Code”\nChoose either HTTPS or SSH, depending on how you connect to GitHub with Git on your computer (see the Configuration section of Unit 1)\nCopy the address\n\nThen in your terminal, navigate to your desired folder and issue the following command:\n\nCodegit clone &lt;address&gt;\n\n\nYou should now see the repository has been cloned to your computer.\n\n\nFirst, navigate to the repository you want to clone on the GitHub website.\n\n\nClick on the green button labelled ‘Code’\nClick on ‘Open with GitHub Desktop’\nYou should then see a window like this pop up in GitHub Desktop:\n\n\n\nThe URL of the repository on GitHub has automatically been populated\nChoose where you would like the repository to be cloned to on your computer\nClick ‘Clone’\n\n\n\n\nUsing this approach, we have a copy of the files and folders in the repository, but we have also copied the metadata which makes this into a Git repository. To answer the example above, now if a project maintainer makes an update to the project on GitHub, we can easily sync both versions:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nIn the project folder just issue the pull command:\n\nCodegit pull\n\n\n\n\nOn GitHub Desktop, click the ‘Fetch origin’ button in the top bar:"
  },
  {
    "objectID": "index.html#fork",
    "href": "index.html#fork",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n10.1 Fork",
    "text": "10.1 Fork\nTo fork a GitHub repository, first, click the Fork button on the top right:\n\nThen you have the opportunity to give the forked repository a different name, description, and which branch to fork: \nAnd that’s it! You have a copy of the project under your name on GitHub:"
  },
  {
    "objectID": "index.html#clone-1",
    "href": "index.html#clone-1",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n10.2 Clone",
    "text": "10.2 Clone\nNext, we’ll clone the project to our local machine:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\n\nClick on the green button labelled “Code”\nChoose either HTTPS or SSH depending on your authentication setup and copy the URL Next, we can navigate to the folder we want and run the command:\n\n\nCodegit clone git@github.com:daviestar/tutorial2.git .\n\n\nCloning into '.'...\n\n\nIn GitHub Desktop, click on the ‘repository’ tab in the top-left of the window, then ‘Add’, then ‘Clone repository…’: \nChoose the ‘URL’ tab and enter dmca-glasgow/tutorial2 into the ‘Repository URL’ input box, choose where you’d like to store the repository on your computer, then finally click ‘Clone’:"
  },
  {
    "objectID": "index.html#make-some-changes",
    "href": "index.html#make-some-changes",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n10.3 Make some changes",
    "text": "10.3 Make some changes\nLet’s add a new line to the readme.md file, making sure to save it:\n\n\n\n\n\n\nreadme.md\n\n\n\n## Follow along tutorial 2: Create a Pull Request to an existing project\nMy updated text."
  },
  {
    "objectID": "index.html#stage-commit-and-push-the-change-to-our-repository",
    "href": "index.html#stage-commit-and-push-the-change-to-our-repository",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n10.4 Stage, commit and push the change to our repository",
    "text": "10.4 Stage, commit and push the change to our repository\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit add readme.md\ngit commit -m \"added my updated text to readme\"\ngit push\n\n\n[main 7d73c6c] added my updated text to readme\n1 file changed, 2 insertions(+)\nTo github.com:daviestar/tutorial2.git\nc9dfc4a..7d73c6c  main -&gt; main\n\n\nIn GitHub Desktop, add a descriptive message and click ‘Commit to main’:"
  },
  {
    "objectID": "index.html#create-a-pull-request",
    "href": "index.html#create-a-pull-request",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n10.5 Create a Pull Request",
    "text": "10.5 Create a Pull Request\n\n\nNavigate to the original project repository\nClick on the Pull Requests tab\nClick on the green button with the label “New pull request”\n\n\n\nClick “compare across forks”\nSelect your repository from the “head” dropdown menu\nSee your commit message!\nSee the contents of your commit! Now you can click the green button with the label “Create pull request”.\n\n\nNow you have the opportunity to rename your Pull Request and give it a description. When you’re ready, you can click the green button with the label “Create pull request”.\nNote that you have the option to create a “Draft Pull Request”. This lets other users know that although you have opened a Pull Request, it’s not ready to review yet. This allows you the flexibility to set up the Pull Request before finalising the change. For example, you may want to make others aware that you are working on this particular change so they don’t start working on it too.\nThe “Draft Pull Request” feature is unfortunately only available on public repositories and some enterprise accounts. If you were hoping to use this workflow in a private repository, another convention is to put “WIP” (Work In Progress) at the top of your Pull Request description.\n\nNow we can see our Pull Request has been created. At this point, the project maintainers will be notified. There’s nothing else we can do now, as we don’t have permission to integrate this change ourselves, but we will be notified if there is any activity on the Pull Request."
  },
  {
    "objectID": "index.html#code-review",
    "href": "index.html#code-review",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n10.6 Code review",
    "text": "10.6 Code review\nThe Pull Request page we have just created is where a project maintainer will perform a code review. As an extreme example, the reviewer has a duty to at least ensure someone isn’t submitting a virus to their project, so your code will be read and reviewed.\nFor the reviewer, this is a whole topic (or even course) on its own as Code Review can be such a powerful process. At its best, it can be an opportunity to spread knowledge and build relationships in a team while keeping the codebase standardised and robust. It’s just simply a good idea to have a 2nd set of eyes look over your code offering constructive criticism."
  }
]