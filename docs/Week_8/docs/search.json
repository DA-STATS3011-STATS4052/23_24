[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 8: Collaborative Coding 2",
    "section": "",
    "text": "This week’s material is based on the Version Control Course from the School of Mathematics and Statistics at Glasgow University. The content has been reduced to fit the class structure. At the end this week, please provide some feedback on the materials on https://uofg.qualtrics.com/jfe/form/SV_56jF2LNgmA6qrhY."
  },
  {
    "objectID": "index.html#working-with-other-people",
    "href": "index.html#working-with-other-people",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n2.1 Working with other people",
    "text": "2.1 Working with other people\nBranches enable a team to work on the same files at the same time. However, it doesn’t work like other collaboration tools like Google Docs or Microsoft 365, where you can see other users editing parts of a file as you work. Instead, branches allow collaborators to work in isolation, not worrying about what others are up to, and when the time comes to integrate changes into the default branch, Git provides the tools to ensure you don’t overwrite someone else’s work (or, if you do, you do it very intentionally!)."
  },
  {
    "objectID": "index.html#grouping-commits",
    "href": "index.html#grouping-commits",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n2.2 Grouping commits",
    "text": "2.2 Grouping commits\nEven if you’re working on your own, branches can be used as a tool to group multiple commits. For example, when working on a new feature for a project, you can create a branch named after your feature, then continue to use Git best practices by breaking your task into small manageable chunks, and complete one thing at a time and commit it. Then when it comes time to integrate your changes to the main branch, you can choose to “squash” those small commits down into one “merge commit” named after your new feature. This helps to keep the commit history on the default branch minimal and tidy, only showing completed tasks such as new features and bug fixes."
  },
  {
    "objectID": "index.html#create-a-new-local-git-repository",
    "href": "index.html#create-a-new-local-git-repository",
    "title": "Week 8: Collaborative Coding 2",
    "section": "\n3.1 Create a new local Git repository",
    "text": "3.1 Create a new local Git repository\nLet’s create a new folder on our computer called ‘tutorial3’ and initialise Git:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nCreate a directory for your ‘tutorial3’ work:\n\nCodemkdir tutorial3\ncd tutorial3\n\n\nand run git init inside:\n\nCodegit init\n\n\n\nInitialized empty Git repository in /Users/staff/Work/tutorial3/.git/\n\n\n\nChoose File &gt; New Repository... from the menu.\nIn the “Create a New Repository” form, name the repository “tutorial3”, set the “Local Path” field to your preferred location and click the “Create Repository” button:\n\n\n\n\nAdd the following file to the repository:\n\n\n\n\n\n\nexample.md\n\n\n\nHello\n\n\nThen add and commit the file:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit add example.md\ngit commit -m \"Add example.md\"\n\n\n\n\n\n\n\n\nNext, let’s create a branch named shout based on this commit.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nWe can create a new branch and switch to it using the switch command with the -c flag:\n\nCodegit switch -c shout\n\n\n\nSwitched to a new branch 'shout'\n\n\n\n\n\n\n\nAdd an exclamation mark to the end of the word within the example.md file:\n\n\n\n\n\n\nexample.md\n\n\n\nHello!\n\n\nThen commit the change:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit add example.md\n\n\n\ngit commit -m \"Add exclamation mark\"\n\n[shout eed4222] Add exclamation mark\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\nLet’s take a quick look at the log:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit log --all --decorate --oneline --graph\n\n\n\n* eed4222 (HEAD -&gt; shout) Add exclamation mark\n\n* 8f601cd (main) Add example.md\n\n\n\n\n\n\n\nNow let’s try merging the branch back into the main branch. First, switch back to main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit switch main\n\n\n\nSwitched to branch 'main'\n\n(Note, we don’t include the -c flag as this branch already exists)\n\n\n\n\n\n\nThen merge our shout branch into main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit merge shout\n\n\n\nUpdating 8f601cd..eed4222\n\nFast-forward\n\nexample.md | 2 +-\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\n\nWe can check that the version of our file in the main branch now has the exclamation mark:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodecat example.md\n\n\n\nHello!\n\n\n\n\n\n\n\nAs the change is now reflected in our main branch, we can safely delete our shout branch:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit branch --delete shout\n\n\n\nDeleted branch shout (was eed4222).\n\n\n\nSimply right click on the shout branch here and select Delete"
  }
]